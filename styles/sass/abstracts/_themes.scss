@use './variables' as *;
// themes: using same variable names that change value based on theme type (class of themeDark/themeLight on root element)
$themes: (
    Light: (bgColor: $white,
        bgColorDark: $accentBlue,
        primeTextColor: $darkBlue,
        secText: $darkBlue,

        formText: $darkBlue,
        formHover: $accentBlue,
        formActive: $brandGreen,
        darkLink: $accentBlue,
        // project specific
        pokeJack: rgb(198, 62, 78),
        stockMyFridgeWhite: rgba(239, 239, 239, 0.887),
        stockMyFridgeGreen: rgb(125, 161, 80),
        randomQuiz: $accentBlue,
        deliciousPink:rgb(100, 166, 4),
        // static
        staticWhite: $white,
        staticDarkBlue: $darkBlue,
        staticBrandGreen: $brandGreen ),

    Dark:(bgColor: $darkBlue,
        bgColorDark: $accentBlue,
        primeTextColor: $white,
        secText: $white,

        formText:$brandGreen,
        formHover:$accentGreen ,
        formActive:$white,
        darkLink: $accentGreen,
        // project specific
        pokeJack: rgb(198, 62, 78),
        stockMyFridgeWhite: rgba(239, 239, 239, 0.887),
        stockMyFridgeGreen: rgb(125, 161, 80),
        randomQuiz: $accentBlue,
        deliciousPink:rgb(100, 166, 4),
        // static
        staticWhite: $white,
        staticDarkBlue: $darkBlue,
        staticBrandGreen: $brandGreen )
);



// setup of mixin

// on calling '@include theme'
// // 

@mixin themed() {

    @each $theme,
    $map in $themes {

        // setting keyword themeName as modes - when variables change
        .theme#{$theme} & {
            $theme-map: () !global;

            //create theme map, each key 
            @each $key,
            $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }

            @content;
            $theme-map: null !global;
        }
    }
}

@function t($key) {
    @return map-get($theme-map, $key);
}