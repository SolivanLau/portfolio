@use './variables' as *;
// themes: using same variable names that change value based on theme type (class of themeDark/themeLight on root element)
$themes: (
    Light: (bgColor: $white,
        bgColorDark: $accentBlue,
        primeTextColor: $darkBlue,
        secText: $darkBlue,
        darkTextColor: $darkBlue,
        formText: $darkBlue,
        formHover: $accentBlue,
        formActive: $brandGreen,
        darkLink: $accentBlue),

    Dark:(bgColor: $darkBlue,
        bgColorDark: $accentBlue,
        primeTextColor: $white,
        secText: $white,
        darkTextColor:$darkBlue,
        formText:$brandGreen,
        formHover:$accentGreen ,
        formActive:$white,
        darkLink: $accentGreen)
);



// setup of mixin

// on calling '@include theme'
// // 

@mixin themed() {

    @each $theme,
    $map in $themes {

        // setting keyword themeName as modes - when variables change
        .theme#{$theme} & {
            $theme-map: () !global;

            //create theme map, each key 
            @each $key,
            $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }

            @content;
            $theme-map: null !global;
        }
    }
}

@function t($key) {
    @return map-get($theme-map, $key);
}